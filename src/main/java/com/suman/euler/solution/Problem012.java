/**
 * Problem: Highly divisible triangular number
 * 
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 
 * 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would 
 * be:
 * 
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * 
 * Let us list the factors of the first seven triangle numbers:
 * 
 *     1: 1
 *     3: 1,3
 *     6: 1,2,3,6
 *    10: 1,2,5,10
 *    15: 1,3,5,15
 *    21: 1,3,7,21
 *    28: 1,2,4,7,14,28
 *    
 * We can see that 28 is the first triangle number to have over five divisors.
 * 
 * What is the value of the first triangle number to have over five hundred divisors?
 */

package com.suman.euler.solution;

import com.suman.euler.function.Function;
import com.suman.euler.problem.EulerProblem;

public class Problem012 implements EulerProblem {
	private final int requiredDivisors = 500;

	/**
	 * @see com.suman.euler.problem.EulerProblem#executeSoultion()
	 */
	public Object executeSoultion() {
		long triangleNo = 0;
		int nThNumber = 2;
		boolean done = false;
		while (!done) {
			triangleNo = Function.sumOfTheNaturalNumbers(nThNumber++);
			long divisor = 1;
			long alternateDivisor = triangleNo;
			int numberOfDivisors = 2;
			for (long index = 2; index <= Math.sqrt(triangleNo); index++) {
				if (triangleNo % index == 0) {
					divisor = index;
					alternateDivisor = triangleNo / index;
					numberOfDivisors += 2;
					if (numberOfDivisors > requiredDivisors) {
						done = true;
						break;
					} else if (alternateDivisor - divisor < 2) {
						break;
					}
				}
			}
		}
		return triangleNo;
	}

}
