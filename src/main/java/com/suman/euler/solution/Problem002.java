/**
 * Problem: Even Fibonacci numbers
 * 
 * Each new term in the Fibonacci sequence is generated by adding the 
 * previous two terms. By starting with 1 and 2, the first 10 terms will be: 
 * 			1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... 
 * By considering the terms in the Fibonacci sequence whose values do not 
 * exceed four million, find the sum of the even-valued terms.
 */

package com.suman.euler.solution;

import java.util.List;

import com.suman.euler.function.Function;
import com.suman.euler.problem.EulerProblem;

public class Problem002 implements EulerProblem {

	/**
	 * @see com.suman.euler.problem.EulerProblem#executeSoultion()
	 */
	public Object executeSoultion() {
		int maxNumber = 4000000;
		int sum = 0;
		List<Integer> fibonacciSequence = Function.getFibonacciSequence(maxNumber);
		for (Integer number : fibonacciSequence) {
			if (Function.isEven(number)) {
				sum += number;
			}
		}
		return sum;
	}
}
